(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("BezierCanvas", [], factory);
	else if(typeof exports === 'object')
		exports["BezierCanvas"] = factory();
	else
		root["BezierCanvas"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Point representation class
 */
var Point = /** @class */ (function () {
    function Point(x, y) {
        this.id = 0;
        this.active = false;
        this.parent = null;
        this.xCoord = x;
        this.yCoord = y;
        this.id = Point.count++;
    }
    Object.defineProperty(Point.prototype, "xCoord", {
        set: function (x) {
            this.x = Math.round(x);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Point.prototype, "yCoord", {
        set: function (y) {
            this.y = Math.round(y);
        },
        enumerable: true,
        configurable: true
    });
    Point.prototype.isActive = function () {
        return this.active;
    };
    Point.prototype.isHandler = function () {
        return this.isHandler1() || this.isHandler2();
    };
    Point.prototype.isHandler1 = function () {
        return this.parent.handler1 == this;
    };
    Point.prototype.isHandler2 = function () {
        return this.parent.handler2 == this;
    };
    Point.prototype.clone = function () {
        return new Point(this.x, this.y);
    };
    Point.prototype.toString = function () {
        return "(x: " + this.x + ", y: " + this.y + ")";
    };
    Point.count = 0;
    return Point;
}());
/* harmony default export */ __webpack_exports__["a"] = (Point);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfills__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfills___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__polyfills__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Point__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Shapes__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LineCap__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__BezierUtils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__HistoryManagerAbstract__ = __webpack_require__(7);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var BezierCanvas = /** @class */ (function (_super) {
    __extends(BezierCanvas, _super);
    /*******************************************************/
    /**
     * Constructor
     * @param {HTMLCanvasElement} canvas
     * @param options Customization options
     */
    function BezierCanvas(canvas, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.paintSplineOn = true;
        _this.constructionPoints = [];
        _this.mouseMoveThrottleTime = 30;
        _this.lastMouseMoveTime = NaN;
        _this.canvas = null;
        _this.ctx = null;
        _this.isMouseDown = false;
        _this.ctrlKeyIsDown = false;
        _this.currentMovingPoint = null;
        _this.mouseReleaseAfterConstructionPointCreation = true;
        _this.options = {
            historySize: 50,
            naturalDrawMode: true,
            maxDistance: 10,
            smoothFactor: 0.5,
            constraintTangents: true,
            constructionPointSize: 6,
            constructionPointBorderSize: 1,
            constructionPointBorderColor: 'rgb(150, 150, 150)',
            constructionPointFillColor: 'rgb(230, 230, 230)',
            constructionPointActiveFillColor: 'cyan',
            constructionPointActiveBorderColor: 'rgb(100, 120, 255)',
            constructionPointShape: __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Disc,
            controlPointBorderColor: 'rgb(120, 120, 120)',
            controlPointFillColor: 'rgb(180, 180, 180)',
            controlPointActiveFillColor: 'cyan',
            controlPointActiveBorderColor: 'rgb(100, 120, 255)',
            controlPointBorderSize: 10,
            controlPointSize: 4,
            controlPointShape: __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Disc,
            tangentColor: 'rgb(150, 150, 150)',
            tangentThickness: 2,
            lineCap: __WEBPACK_IMPORTED_MODULE_4__LineCap__["a" /* default */].Round,
            splineColor: 'rgb(0,0,200)',
            splineThickness: 5,
            showMaxNextAndPreviousTangents: 1 // Set -1 for all
        };
        /**
         * Get a position object from a mouse event
         * @param e
         * @returns {Point}
         */
        _this.getPosition = function (e) {
            var rect = _this.canvas.getBoundingClientRect();
            return new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](e.clientX - rect.left, e.clientY - rect.top);
        };
        _this.setOptions(options);
        _this.historySize = _this.options.historySize;
        if (options.hasOwnProperty('points')) {
            _this.setPoints(options.points);
        }
        _this.init(canvas);
        return _this;
    }
    /**
     * Get distance between 2 points
     * @param {Point} a First point
     * @param {Point} b Second point
     * @returns {number} Distance
     */
    BezierCanvas.getDistance = function (a, b) {
        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    };
    /**
     * Reset the current active point
     */
    BezierCanvas.prototype.resetActivePoint = function () {
        this.constructionPoints.forEach(function (point) {
            point.active = false;
            point.handler1.active = false;
            if (point.handler2) {
                point.handler2.active = false;
            }
        });
    };
    /**
     * Set a point to active
     * @param {Point} point
     */
    BezierCanvas.prototype.setActivePoint = function (point) {
        this.resetActivePoint();
        point.active = true;
        this.currentMovingPoint = point;
    };
    /**
     * Implementation of the De Casteljau's reverse algorithm to remove a construction point between 2 others
     * @param {ConstructionPoint} point
     */
    BezierCanvas.prototype.removeConstructionPoint = function (point) {
        var _this = this;
        var foundIndex = NaN, foundPoint = null, P0 = null, P1 = null, P2 = null, P3 = null;
        if (this.currentMovingPoint === point) {
            this.currentMovingPoint = null;
        }
        this.constructionPoints.forEach(function (curPoint, index) {
            if (curPoint.id === point.id) {
                foundIndex = index;
                foundPoint = curPoint;
                P0 = _this.constructionPoints[index - 1] || null;
                P1 = (P0 ? (P0.handler2 || P0.handler1) : null);
                P3 = _this.constructionPoints[index + 1] || null;
                P2 = (P3 ? P3.handler1 : null);
                return;
            }
        });
        if (point.fromCasteljau && P0 && P1 && P2 && P3) {
            var k = BezierCanvas.getDistance(foundPoint.handler2, foundPoint)
                / BezierCanvas.getDistance(foundPoint.handler1, foundPoint);
            if (!isNaN(k)) {
                var Px = (1 + k) * P1.x - k * P0.x;
                var Py = (1 + k) * P1.y - k * P0.y;
                var P = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](Px, Py);
                var Qx = ((1 + k) * P2.x - P3.x) / k;
                var Qy = ((1 + k) * P2.y - P3.y) / k;
                var Q = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](Qx, Qy);
                P1.x = P.x;
                P1.y = P.y;
                P2.x = Q.x;
                P2.y = Q.y;
            }
        }
        this.constructionPoints.splice(foundIndex, 1);
        if (this.constructionPoints.length && !this.options.naturalDrawMode) {
            // First & last points only have one handler (in normal mode)
            if (this.constructionPoints[0].handler2) {
                this.constructionPoints[0].handler1 = this.constructionPoints[0].handler2.clone();
                this.constructionPoints[0].handler2 = null;
            }
            this.constructionPoints[this.constructionPoints.length - 1].handler2 = null;
        }
    };
    /**
     * Get the closest construction point from position (x, y) or null if no one is closer or equal to maxDistance
     * @param {number} x X coordinate
     * @param {number} y Y coordinate
     * @returns {ConstructionPoint} Closest construction point
     */
    BezierCanvas.prototype.findClosestConstructionPoint = function (x, y) {
        var _this = this;
        var foundPoint = null;
        var position = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](x, y);
        this.constructionPoints.forEach(function (curPoint) {
            var distance = BezierCanvas.getDistance(position, curPoint);
            if (distance < _this.options.maxDistance) {
                foundPoint = curPoint;
                return;
            }
        });
        return foundPoint;
    };
    /**
     * Projects a position (x,y) to a point on the current drawn Spline
     * @param {number} x X coordinate
     * @param {number} y Y coordinate
     * @returns {any} The projection point if it's found regarding maxDistance option, null else
     */
    BezierCanvas.prototype.findPointOnSpline = function (x, y) {
        var _this = this;
        var foundPoint = null, distance = NaN, position = NaN, t = NaN, P0 = null, P1 = null, P2 = null, P3 = null;
        var clickPosition = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](x, y);
        var steps = 100; // Precision steps
        this.constructionPoints.forEach(function (currentPoint, index) {
            var nextPoint = _this.constructionPoints[index + 1];
            if (null == nextPoint) {
                return;
            }
            else {
                for (var i = 0; i <= steps; i++) {
                    var curPoint = __WEBPACK_IMPORTED_MODULE_5__BezierUtils__["a" /* default */].cubicBezierInterpolate(i / steps, currentPoint, currentPoint.handler2 || currentPoint.handler1, nextPoint.handler1, nextPoint);
                    var curDistance = BezierCanvas.getDistance(curPoint, clickPosition);
                    if (curDistance <= _this.options.maxDistance && (isNaN(distance) || distance > curDistance)) {
                        foundPoint = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](curPoint.x, curPoint.y);
                        distance = curDistance;
                        position = index;
                        t = i / steps;
                        P0 = currentPoint;
                        P1 = (currentPoint.handler2 || currentPoint.handler1);
                        P2 = nextPoint.handler1;
                        P3 = nextPoint;
                    }
                }
            }
        });
        return foundPoint ? {
            point: foundPoint, distance: distance,
            position: position + 1, t: t, P0: P0, P1: P1, P2: P2, P3: P3
        } : null;
    };
    /**
     * Implementation of the De Casteljau's algorithm to insert a new construction point between 2 existing ones
     * @param t
     * @param P0
     * @param P1
     * @param P2
     * @param P3
     */
    BezierCanvas.prototype.knotInsertion = function (t, P0, P1, P2, P3) {
        var _this = this;
        var P4 = BezierCanvas.weighted(P0, P1, t);
        var P5 = BezierCanvas.weighted(P1, P2, t);
        var P6 = BezierCanvas.weighted(P2, P3, t);
        var P7 = BezierCanvas.weighted(P4, P5, t);
        var P8 = BezierCanvas.weighted(P5, P6, t);
        var P9 = BezierCanvas.weighted(P7, P8, t);
        var newPoint = new __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */](P9.x, P9.y);
        newPoint.fromCasteljau = true;
        this.setActivePoint(newPoint);
        newPoint.handler1 = P7;
        newPoint.handler2 = P8;
        P1.x = P4.x;
        P1.y = P4.y;
        P2.x = P6.x;
        P2.y = P6.y;
        this.constructionPoints.forEach(function (point, index) {
            if (point.id === P0.id) {
                _this.constructionPoints.splice(index + 1, 0, newPoint);
                return;
            }
        });
    };
    /**
     * Mouse up management
     */
    BezierCanvas.prototype.bindCanvasMouseUp = function () {
        var _this = this;
        this.canvas.addEventListener('mouseup', function () {
            _this.isMouseDown = false;
            _this.mouseReleaseAfterConstructionPointCreation = true;
            _this.pushHistoryStateIfChanged();
        });
    };
    /**
     * Right click management
     */
    BezierCanvas.prototype.bindCanvasMouseDownRight = function () {
        var _this = this;
        this.canvas.addEventListener('contextmenu', function (e) {
            e.preventDefault();
            e.stopPropagation();
            var position = _this.getPosition(e);
            var point = _this.findClosestConstructionPoint(position.x, position.y);
            if (null != point) {
                _this.removeConstructionPoint(point);
            }
            return false;
        });
    };
    /**
     * Mouse Leave management
     */
    BezierCanvas.prototype.bindCanvasMouseLeave = function () {
        var _this = this;
        this.canvas.addEventListener('mouseleave', function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.isMouseDown = false;
            _this.mouseReleaseAfterConstructionPointCreation = true;
            _this.pushHistoryStateIfChanged();
            return false;
        });
    };
    /**
     * Left click management
     */
    BezierCanvas.prototype.bindCanvasMouseDownLeft = function () {
        var _this = this;
        this.canvas.addEventListener('mousedown', function (e) {
            if (e.which !== 1) {
                return;
            }
            _this.isMouseDown = true;
            var position = _this.getPosition(e);
            var distance = NaN, selectedPoint = null;
            if (_this.ctrlKeyIsDown) {
                _this.constructionPoints.forEach(function (constructionPoint) {
                    var pointsToCheck = [constructionPoint, constructionPoint.handler1];
                    if (constructionPoint.handler2) {
                        pointsToCheck.push(constructionPoint.handler2);
                    }
                    pointsToCheck.forEach(function (checkedPoint) {
                        var curDistance = BezierCanvas.getDistance(checkedPoint, position);
                        if (curDistance <= _this.options.maxDistance
                            && (isNaN(distance) || (distance >= curDistance))) {
                            distance = BezierCanvas.getDistance(checkedPoint, position);
                            selectedPoint = checkedPoint;
                        }
                    });
                });
                if (!selectedPoint) {
                    return (_this.currentMovingPoint = null);
                }
                else {
                    _this.setActivePoint(selectedPoint);
                }
            }
            else {
                var pointOnSpline = _this.findPointOnSpline(position.x, position.y);
                if (pointOnSpline) {
                    return _this.knotInsertion(pointOnSpline.t, pointOnSpline.P0, pointOnSpline.P1, pointOnSpline.P2, pointOnSpline.P3);
                }
            }
            if (!selectedPoint) {
                _this.mouseReleaseAfterConstructionPointCreation = false;
                var point = new __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */](position.x, position.y);
                point.handler1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](position.x, position.y); // We don't set the handler2, as it's the last point
                if (_this.options.naturalDrawMode) {
                    point.handler2 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](position.x, position.y);
                }
                _this.constructionPoints.push(point);
                _this.setActivePoint(_this.options.naturalDrawMode ? point.handler2 : point.handler1);
                if (_this.constructionPoints.length > 2) {
                    // Set the handler2 of the N-1 (previous) point (Level 1 smoothness (same derivative))
                    var D = _this.constructionPoints[_this.constructionPoints.length - 2]; // Prev construction point
                    if (_this.options.naturalDrawMode) {
                        D.handler1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](D.x - _this.options.smoothFactor * (D.handler2.x - D.x), D.y - _this.options.smoothFactor * (D.handler2.y - D.y));
                    }
                    else {
                        D.handler2 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](D.x - _this.options.smoothFactor * (D.handler1.x - D.x), D.y - _this.options.smoothFactor * (D.handler1.y - D.y));
                    }
                }
            }
        });
    };
    /**
     * Key press management
     */
    BezierCanvas.prototype.bindKeyPress = function () {
        var _this = this;
        document.addEventListener('keydown', function (e) {
            var code = e.which || e.keyCode;
            if (e.ctrlKey) {
                _this.ctrlKeyIsDown = true;
            }
            _this.historyManagerHandleKeyboardEvents(e);
        });
        document.addEventListener('keyup', function () {
            _this.ctrlKeyIsDown = false;
        });
    };
    /**
     * Mouse move when mouse is pressed management
     */
    BezierCanvas.prototype.bindCanvasMouseDownMove = function () {
        var _this = this;
        this.canvas.addEventListener('mousemove', function (e) {
            if (!_this.isMouseDown) {
                return;
            }
            else {
                // Limit mouseMove events
                var time = new Date().getTime();
                if (!isNaN(_this.lastMouseMoveTime) && time < _this.lastMouseMoveTime + _this.mouseMoveThrottleTime) {
                    return;
                }
                else {
                    _this.lastMouseMoveTime = time;
                }
            }
            var position = _this.getPosition(e);
            var activePoint = _this.currentMovingPoint;
            if (!activePoint) {
                return false;
            }
            var delta1X = NaN, delta1Y = NaN;
            var delta2X = NaN, delta2Y = NaN;
            if (activePoint instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */]) {
                delta1X = activePoint.x - activePoint.handler1.x;
                delta1Y = activePoint.y - activePoint.handler1.y;
                if (activePoint.handler2) {
                    delta2X = activePoint.x - activePoint.handler2.x;
                    delta2Y = activePoint.y - activePoint.handler2.y;
                }
            }
            if (!(activePoint instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */])) {
                if (_this.options.constraintTangents) {
                    if (activePoint.isHandler1() && activePoint.parent.handler2) {
                        var distance1 = BezierCanvas.getDistance(position, activePoint.parent);
                        var distance2 = BezierCanvas.getDistance(activePoint.parent.handler2, activePoint.parent);
                        if (_this.options.naturalDrawMode && !_this.mouseReleaseAfterConstructionPointCreation) {
                            activePoint.parent.handler2.x = activePoint.parent.x - (position.x - activePoint.parent.x);
                            activePoint.parent.handler2.y = activePoint.parent.y - (position.y - activePoint.parent.y);
                        }
                        else {
                            var ratio = (distance1 / distance2);
                            if (ratio !== 0) {
                                activePoint.parent.handler2.x = activePoint.parent.x
                                    + (1 / ratio) * (activePoint.parent.x - position.x);
                                activePoint.parent.handler2.y = activePoint.parent.y
                                    + (1 / ratio) * (activePoint.parent.y - position.y);
                            }
                            else {
                                return;
                            }
                        }
                    }
                    else if (activePoint.isHandler2()) {
                        var distance1 = BezierCanvas.getDistance(position, activePoint.parent);
                        var distance2 = BezierCanvas.getDistance(activePoint.parent.handler1, activePoint.parent);
                        var ratio = (distance1 / distance2);
                        if (_this.options.naturalDrawMode && !_this.mouseReleaseAfterConstructionPointCreation) {
                            activePoint.parent.handler1.x = activePoint.parent.x - (position.x - activePoint.parent.x);
                            activePoint.parent.handler1.y = activePoint.parent.y - (position.y - activePoint.parent.y);
                        }
                        else {
                            if (ratio !== 0) {
                                activePoint.parent.handler1.x = activePoint.parent.x
                                    + (1 / ratio) * (activePoint.parent.x - position.x);
                                activePoint.parent.handler1.y = activePoint.parent.y
                                    + (1 / ratio) * (activePoint.parent.y - position.y);
                            }
                            else {
                                return;
                            }
                        }
                    }
                }
            }
            activePoint.x = position.x;
            activePoint.y = position.y;
            if (activePoint instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */]) {
                activePoint.handler1.x = activePoint.x - delta1X;
                activePoint.handler1.y = activePoint.y - delta1Y;
                if (activePoint.handler2) {
                    activePoint.handler2.x = activePoint.x - delta2X;
                    activePoint.handler2.y = activePoint.y - delta2Y;
                }
            }
        });
    };
    /**
     * Renders a Construction Point
     * @param {ConstructionPoint} point
     */
    BezierCanvas.prototype.paintConstructionPoint = function (point) {
        this.ctx.save();
        this.ctx.strokeStyle = this.options.constructionPointBorderColor;
        this.ctx.fillStyle = this.options.constructionPointFillColor;
        this.ctx.lineWidth = this.options.constructionPointBorderSize;
        if (point.isActive()) {
            this.ctx.fillStyle = this.options.constructionPointActiveFillColor;
            this.ctx.strokeStyle = this.options.constructionPointActiveBorderColor;
        }
        switch (this.options.constructionPointShape) {
            case __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Disc:
                this.ctx.beginPath();
                this.ctx.arc(point.x, point.y, 0.5 * this.options.constructionPointSize, 0, 2 * Math.PI, false);
                if (this.options.constructionPointBorderSize > 0) {
                    this.ctx.lineWidth = this.options.constructionPointBorderSize;
                    this.ctx.stroke();
                }
                this.ctx.closePath();
                this.ctx.fill();
                break;
            case __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Square:
            default:
                this.ctx.fillRect(point.x - this.options.constructionPointSize / 2, point.y - this.options.constructionPointSize / 2, this.options.constructionPointSize, this.options.constructionPointSize);
                if (this.options.constructionPointBorderSize > 0) {
                    this.ctx.lineWidth = this.options.constructionPointBorderSize;
                    this.ctx.beginPath();
                    this.ctx.stroke();
                    this.ctx.closePath();
                }
                break;
        }
        this.ctx.restore();
    };
    /**
     * Renders a Control Point
     * @param {Point} point
     */
    BezierCanvas.prototype.paintControlPoint = function (point) {
        this.ctx.save();
        this.ctx.strokeStyle = this.options.controlPointBorderColor;
        this.ctx.fillStyle = this.options.controlPointFillColor;
        this.ctx.lineWidth = this.options.controlPointBorderSize;
        if (point.isActive()) {
            this.ctx.fillStyle = this.options.controlPointActiveFillColor;
            this.ctx.strokeStyle = this.options.controlPointActiveBorderColor;
        }
        switch (this.options.controlPointShape) {
            case __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Disc:
                this.ctx.beginPath();
                this.ctx.arc(point.x, point.y, 0.5 * this.options.controlPointSize, 0, 2 * Math.PI, false);
                this.ctx.fill();
                this.ctx.closePath();
                break;
            case __WEBPACK_IMPORTED_MODULE_3__Shapes__["a" /* Shapes */].Square:
                this.ctx.fillRect(point.x - this.options.controlPointSize / 2, point.y - this.options.controlPointSize / 2, this.options.controlPointSize, this.options.controlPointSize);
                break;
        }
        if (this.options.controlPointBorderSize > 0) {
            this.ctx.lineWidth = this.options.controlPointBorderSize;
            this.ctx.stroke();
        }
        this.ctx.restore();
    };
    /**
     * Renders tangent (segment between 2 Control points)
     * @param {Point} point1
     * @param {Point} point2
     */
    BezierCanvas.prototype.paintTangent = function (point1, point2) {
        if (!this.options.tangentThickness) {
            return;
        }
        this.ctx.save();
        this.ctx.strokeStyle = this.options.tangentColor;
        this.ctx.lineWidth = this.options.tangentThickness;
        this.ctx.beginPath();
        this.ctx.moveTo(point1.x, point1.y);
        this.ctx.lineTo(point2.x, point2.y);
        this.ctx.stroke();
        this.ctx.closePath();
        this.ctx.restore();
    };
    /**
     * Renders the Bezier spline
     */
    BezierCanvas.prototype.paintBezier = function () {
        var _this = this;
        if (this.constructionPoints.length > 1) {
            this.ctx.save();
            this.ctx.strokeStyle = this.options.splineColor;
            this.ctx.lineWidth = this.options.splineThickness;
            this.ctx.lineCap = __WEBPACK_IMPORTED_MODULE_4__LineCap__["a" /* default */].parse(this.options.lineCap);
            this.ctx.beginPath();
            this.constructionPoints.forEach(function (point, index) {
                if (_this.constructionPoints.length > 1 && index !== _this.constructionPoints.length - 1) {
                    var p0 = point, p3 = _this.constructionPoints[index + 1];
                    var p1 = (p0.handler2 || p0.handler1);
                    var p2 = p3.handler1;
                    _this.ctx.moveTo(p0.x, p0.y);
                    _this.ctx.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
                }
            });
            this.ctx.stroke();
            this.ctx.closePath();
            this.ctx.restore();
        }
    };
    /**
     * Renders the active point (separated method to make it on top of all other layers)
     * @param {Point} point
     */
    BezierCanvas.prototype.renderActivePoint = function (point) {
        if (point instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */]) {
            this.paintConstructionPoint(point);
        }
        else {
            this.paintControlPoint(point);
        }
    };
    /**
     * Check if a point is linked to the active point (e.g. if it's one of its Control Points)
     * @param point
     * @returns {boolean}
     */
    BezierCanvas.prototype.concernsActivePoint = function (point) {
        if (!this.currentMovingPoint) {
            return false;
        }
        if (point instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */]) {
            if (this.currentMovingPoint === (point.handler1)
                || (point.handler2 && this.currentMovingPoint === point.handler2)) {
                return true;
            }
        }
        else if (point === this.currentMovingPoint.parent) {
            return true;
        }
        return false;
    };
    /**
     * Check if there are less than maxPositionBefore points between active point and pointToCheck
     * @param {ConstructionPoint} pointToCheck
     * @param {number} maxPositionBefore
     * @returns {boolean}
     */
    BezierCanvas.prototype.isLessOrEqualThanPointsBefore = function (pointToCheck, maxPositionBefore) {
        var _this = this;
        if (!this.currentMovingPoint) {
            return false;
        }
        else {
            // Find active point & compared index
            var activeIndex_1 = NaN, comparedIndex_1 = NaN;
            this.constructionPoints.forEach(function (curPoint, i) {
                if ((_this.currentMovingPoint instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */] && curPoint === _this.currentMovingPoint)
                    || ((!(_this.currentMovingPoint instanceof __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */]))
                        && curPoint === _this.currentMovingPoint.parent)) {
                    activeIndex_1 = i;
                    if (!isNaN(comparedIndex_1)) {
                        return;
                    }
                }
                if (curPoint === pointToCheck) {
                    comparedIndex_1 = i;
                    if (!isNaN(activeIndex_1)) {
                        return;
                    }
                }
            });
            if (!isNaN(comparedIndex_1) && !isNaN(activeIndex_1)) {
                return Math.abs(comparedIndex_1 - activeIndex_1) <= maxPositionBefore;
            }
            return false;
        }
    };
    /**
     * Main rendering method that calls all sub rendering methods
     */
    BezierCanvas.prototype.paintSpline = function () {
        var _this = this;
        var activePoint = null;
        this.paintBezier();
        this.constructionPoints.forEach(function (point) {
            var paintControlPoints = false;
            if (_this.options.showMaxNextAndPreviousTangents === -1 || _this.concernsActivePoint(point)
                || _this.isLessOrEqualThanPointsBefore(point, _this.options.showMaxNextAndPreviousTangents)) {
                paintControlPoints = true;
                _this.paintTangent(point, point.handler1);
                if (point.handler2) {
                    _this.paintTangent(point, point.handler2);
                }
            }
            if (point.isActive()) {
                activePoint = point;
            }
            else {
                _this.paintConstructionPoint(point);
            }
            if (paintControlPoints) {
                if (point.handler1.isActive()) {
                    activePoint = point.handler1;
                }
                else {
                    _this.paintControlPoint(point.handler1);
                }
                if (point.handler2) {
                    if (point.handler2.isActive()) {
                        activePoint = point.handler2;
                    }
                    else {
                        _this.paintControlPoint(point.handler2);
                    }
                }
            }
            if (activePoint) {
                _this.renderActivePoint(activePoint);
            }
        });
    };
    /**
     * Initialize canvas and UI events management
     * @param canvas
     */
    BezierCanvas.prototype.init = function (canvas) {
        this.canvas = canvas;
        this.ctx = this.canvas.getContext('2d');
        this.canvas.width = this.canvas.offsetWidth;
        this.canvas.height = this.canvas.offsetHeight;
        this.bindCanvasMouseDownLeft();
        this.bindCanvasMouseUp();
        this.bindCanvasMouseDownMove();
        this.bindCanvasMouseDownRight();
        this.bindCanvasMouseLeave();
        this.bindKeyPress();
        this.paint();
    };
    /***** Implementation of History Manager Abstract ******/
    /**
     * Switch to historyState
     * @param historyState
     */
    BezierCanvas.prototype.applyHistoryState = function (historyState) {
        this.setPoints(historyState);
    };
    /**
     * Gets current state
     * @returns {Array<any>}
     */
    BezierCanvas.prototype.getCurrentState = function () {
        return this.getPoints();
    };
    /**
     * Gets an Hash of the current state
     * @returns {string}
     */
    BezierCanvas.prototype.getCurrentStateHash = function () {
        return JSON.stringify(this.getCurrentState());
    };
    /***********************************************PUBLIC API**********************************************/
    /**
     * Change current opttions
     * @param options JSON object
     */
    BezierCanvas.prototype.setOptions = function (options) {
        Object.assign(this.options, options);
    };
    /**
     * Triggers a view refreshment
     * @param {Function} callback
     */
    BezierCanvas.prototype.paint = function (callback) {
        if (callback === void 0) { callback = function () {
        }; }
        this.clear();
        if (this.paintSplineOn) {
            this.paintSpline();
        }
        callback(this.ctx);
    };
    /**
     * Starts a new blank project
     * @param {Function} callback
     */
    BezierCanvas.prototype.reset = function (callback) {
        if (callback === void 0) { callback = function () {
        }; }
        this.clear();
        this.historyReset();
        this.constructionPoints = [];
    };
    /**
     * Get current points - used for state management (import/export/history))
     * @returns {Array<any>}
     */
    BezierCanvas.prototype.getPoints = function () {
        var ret = [];
        this.constructionPoints.forEach(function (point) {
            var set = {
                x: point.x,
                y: point.y,
                hp1: { x: point.handler1.x, y: point.handler1.y }
            };
            if (point.handler2) {
                set['hp2'] = { x: point.handler2.x, y: point.handler2.y };
            }
            ret.push(set);
        });
        return ret;
    };
    /**
     * Set current points - used for state management
     * @returns {Array<any>}
     */
    BezierCanvas.prototype.setPoints = function (points) {
        var _this = this;
        this.reset();
        points.forEach(function (point) {
            var parsed = new __WEBPACK_IMPORTED_MODULE_2__ConstructionPoint__["a" /* default */](point.x, point.y);
            parsed.handler1 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](point.hp1.x, point.hp1.y);
            if (point.hasOwnProperty('hp2')) {
                parsed.handler2 = new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](point.hp2.x, point.hp2.y);
            }
            _this.constructionPoints.push(parsed);
        });
    };
    /**
     * Disable rendering
     */
    BezierCanvas.prototype.hideSpline = function () {
        this.paintSplineOn = false;
    };
    /**
     * Enable rendering
     */
    BezierCanvas.prototype.showSpline = function () {
        this.paintSplineOn = true;
    };
    /**
     * Clear canvas
     */
    BezierCanvas.prototype.clear = function () {
        if (this.ctx) {
            this.ctx.clearRect(-1, -1, 1 + this.canvas.width, 1 + this.canvas.height);
        }
    };
    /**
     * Given a number of shapes to draw; get all positions where to place shapes to be separated by an equal distance
     * @param {number} shapesCount  Number of shapes to draw along the spline
     * @returns {any}  Return an array with all positions on which drawing the shapes
     */
    BezierCanvas.prototype.getRegularlyPlacedPoints = function (shapesCount) {
        var _this = this;
        if (this.constructionPoints.length < 2) {
            return [];
        }
        var points = [], beziers = [];
        // Getting the total length
        var length = 0;
        this.constructionPoints.forEach(function (currentPoint, index) {
            var nextPoint = _this.constructionPoints[index + 1];
            if (null == nextPoint) {
                return;
            }
            else {
                var bz = new __WEBPACK_IMPORTED_MODULE_5__BezierUtils__["a" /* default */](currentPoint, currentPoint.handler2 || currentPoint.handler1, nextPoint.handler1, nextPoint);
                beziers.push(bz);
                length += bz.getLength();
            }
        });
        var drawnNumber = 0;
        var currentDistance = 0;
        beziers.forEach(function (bz, index) {
            currentDistance += bz.getLength();
            var shapesToStick = Math.floor((currentDistance / length) * shapesCount) - drawnNumber;
            if (index === bz.length - 1) {
                shapesToStick = shapesCount - drawnNumber;
            }
            drawnNumber += shapesToStick;
            if (shapesToStick > 0) {
                for (var t = 0; t < shapesToStick; t += 1) {
                    var x = NaN, y = NaN;
                    if (index === beziers.length - 1) {
                        x = bz.mx(t / (shapesToStick - 1));
                        y = bz.my(t / (shapesToStick - 1));
                    }
                    else {
                        x = bz.mx(t / (shapesToStick));
                        y = bz.my(t / (shapesToStick));
                    }
                    points.push(new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](x, y));
                }
            }
        });
        return points;
    };
    /**
     * Move along the segment defined by 2 points, depending on the weight
     * @param {Point} P0 First point
     * @param {Point} P1 Second point
     * @param {number} t Weight
     * @returns {Point}
     */
    BezierCanvas.weighted = function (P0, P1, t) {
        return new __WEBPACK_IMPORTED_MODULE_1__Point__["a" /* default */](P0.x * (1 - t) + P1.x * t, P0.y * (1 - t) + P1.y * t);
    };
    return BezierCanvas;
}(__WEBPACK_IMPORTED_MODULE_6__HistoryManagerAbstract__["a" /* default */]));
/* harmony default export */ __webpack_exports__["default"] = (BezierCanvas);


/***/ }),
/* 2 */
/***/ (function(module, exports) {

if (typeof Object.assign != 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, "assign", {
        value: function assign(target, varArgs) {
            'use strict';
            if (target == null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            var to = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                if (nextSource != null) {
                    for (var nextKey in nextSource) {
                        // Avoid bugs when hasOwnProperty is shadowed
                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
            return to;
        },
        writable: true,
        configurable: true
    });
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Point__ = __webpack_require__(0);
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * Bezier construction point representation
 */
var ConstructionPoint = /** @class */ (function (_super) {
    __extends(ConstructionPoint, _super);
    function ConstructionPoint() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._handler1 = null;
        _this._handler2 = null;
        _this.fromCasteljau = false;
        return _this;
    }
    Object.defineProperty(ConstructionPoint.prototype, "handler1", {
        /**
         * First control point getter
         * @returns {Point}
         */
        get: function () {
            return this._handler1;
        },
        /**
         * First control point setter
         * @returns {Point}
         */
        set: function (point) {
            this._handler1 = point;
            if (point) {
                this._handler1.parent = this;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConstructionPoint.prototype, "handler2", {
        /**
         * Last control point getter
         * @returns {Point}
         */
        get: function () {
            return this._handler2;
        },
        /**
         * Last control point setter
         * @returns {Point}
         */
        set: function (point) {
            this._handler2 = point;
            if (point) {
                this._handler2.parent = this;
            }
        },
        enumerable: true,
        configurable: true
    });
    return ConstructionPoint;
}(__WEBPACK_IMPORTED_MODULE_0__Point__["a" /* default */]));
/* harmony default export */ __webpack_exports__["a"] = (ConstructionPoint);


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Shapes; });
/**
 * Available Shape types for construction points rendering
 * @type {{Square: string; Disc: string}}
 */
var Shapes = {
    Square: "square",
    Disc: "disc",
};


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/**
 * Available types of line caps for spline rendering
 */
var LineCap = /** @class */ (function () {
    function LineCap() {
    }
    LineCap.parse = function (val) {
        return (val === LineCap.Butt || val === LineCap.Round || val === LineCap.Square) ? val : LineCap.Round;
    };
    LineCap.Butt = "butt";
    LineCap.Round = "round";
    LineCap.Square = "square";
    return LineCap;
}());
/* harmony default export */ __webpack_exports__["a"] = (LineCap);
;


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Point__ = __webpack_require__(0);

/**
 * This class is used to place shapes along the whole spline to an equal distance
 *
 * (Note): Some parts of this file has been largely inspired by the following links :
 *
 * - https://gamedev.stackexchange.com/questions/5373/
 * /moving-ships-between-two-planets-along-a-bezier-missing-some-equations-for-acce/5427#5427
 * - http://www.carlosicaza.com/2012/08/12
 * /an-more-efficient-way-of-calculating-the-length-of-a-bezier-curve-part-ii/
 */
var BezierUtils = /** @class */ (function () {
    function BezierUtils(a, b, c, d, len) {
        if (len === void 0) { len = 200; }
        var _this = this;
        /**
         * Cubic bezier basic interpolation algorithm shortcut
         * @param {number} t
         * @returns {Point}
         */
        this.interpolate = function (t) {
            return BezierUtils.cubicBezierInterpolate(t, _this.a, _this.b, _this.c, _this.d);
        };
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.len = len;
        this.arcLengths = new Array(this.len + 1);
        this.arcLengths[0] = 0;
        var interpolationPoint = this.interpolate(0);
        var ox = interpolationPoint.x, oy = interpolationPoint.y;
        var clen = 0;
        for (var i = 1; i <= this.len; i += 1) {
            var interpolation = this.interpolate(i / len);
            var x = interpolation.x;
            var y = interpolation.y;
            var dx = ox - x, dy = oy - y;
            clen += Math.sqrt(dx * dx + dy * dy);
            this.arcLengths[i] = clen;
            ox = x;
            oy = y;
        }
    }
    /**
     * Point re-mapper, try to remap a coordinate by ignoring spline dynamism,
     * ie: 0.5 should refer to the middle of the spline
     * @param {number} u bezier coordinate
     * @returns {number} mapped
     */
    BezierUtils.prototype.map = function (u) {
        var targetLength = u * this.arcLengths[this.len];
        var low = 0, high = this.len, index = 0;
        while (low < high) {
            index = low + (((high - low) / 2) | 0);
            if (this.arcLengths[index] < targetLength) {
                low = index + 1;
            }
            else {
                high = index;
            }
        }
        if (this.arcLengths[index] > targetLength) {
            index--;
        }
        var lengthBefore = this.arcLengths[index];
        if (lengthBefore === targetLength) {
            return index / this.len;
        }
        else {
            return (index + (targetLength - lengthBefore) / (this.arcLengths[index + 1] - lengthBefore)) / this.len;
        }
    };
    /**
     * Maps a bezier point to a cartesian one (x)
     * @param {number} u bezier point (0 to 1)
     * @returns {number} point.x
     */
    BezierUtils.prototype.mx = function (u) {
        return this.interpolate(this.map(u)).x;
    };
    /**
     * Maps a bezier point to a cartesian one (y)
     * @param {number} u bezier point (0 to 1)
     * @returns {number} point.y
     */
    BezierUtils.prototype.my = function (u) {
        return this.interpolate(this.map(u)).y;
    };
    /**
     * Gets the spline length
     * source: http://www.carlosicaza.com/2012/08/12
     * /an-more-efficient-way-of-calculating-the-length-of-a-bezier-curve-part-ii/
     */
    BezierUtils.prototype.getLength = function () {
        var steps = 100;
        var inc = 100;
        var length = 0;
        var t = 0;
        var pt = { x: NaN, y: NaN };
        var prevPt = { x: NaN, y: NaN };
        var c = [this.a, this.b, this.c, this.d];
        for (var i = 0; i < inc; i += 1) {
            t = i / steps;
            var t1 = 1.0 - t;
            var t1_3 = t1 * t1 * t1;
            var t1_3a = (3 * t) * (t1 * t1);
            var t1_3b = (3 * (t * t)) * t1;
            var t1_3c = (t * t * t);
            pt.x = (c[0].x * t1_3) + (t1_3a * c[1].x) + (t1_3b * c[2].x) + (t1_3c * c[3].x);
            pt.y = (c[0].y * t1_3) + (t1_3a * c[1].y) + (t1_3b * c[2].y) + (t1_3c * c[3].y);
            if (i > 0) {
                var x = pt.x - prevPt.x;
                var y = pt.y - prevPt.y;
                length = length + Math.sqrt(x * x + y * y);
            }
            prevPt.x = pt.x;
            prevPt.y = pt.y;
        }
        return length;
    };
    /**
     * Cubic bezier basic interpolation algorithm for curve C (P0, P1, P2, P3) at position t
     * @param {number} t
     * @param {Point} P0
     * @param {Point} P1
     * @param {Point} P2
     * @param {Point} P3
     * @returns {Point}
     */
    BezierUtils.cubicBezierInterpolate = function (t, P0, P1, P2, P3) {
        var x = P0.x * Math.pow(1 - t, 3) + 3 * P1.x * t * Math.pow((1 - t), 2)
            + 3 * P2.x * t * t * (1 - t) + +P3.x * t * t * t;
        var y = P0.y * Math.pow(1 - t, 3) + 3 * P1.y * t * Math.pow((1 - t), 2)
            + 3 * P2.y * t * t * (1 - t) + +P3.y * t * t * t;
        return new __WEBPACK_IMPORTED_MODULE_0__Point__["a" /* default */](x, y);
    };
    return BezierUtils;
}());
/* harmony default export */ __webpack_exports__["a"] = (BezierUtils);


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Keys__ = __webpack_require__(8);

var HistoryManagerAbstract = /** @class */ (function () {
    function HistoryManagerAbstract(historySize) {
        if (historySize === void 0) { historySize = 50; }
        this.historySize = historySize;
        this.statesCursor = 0;
        this.statesStack = [];
        this.lastHistoryStateHash = null;
    }
    HistoryManagerAbstract.prototype.safeStatesCursor = function (cursor) {
        this.statesCursor = Math.max(0, Math.min(this.statesStack.length - 1, cursor));
        return this.statesCursor;
    };
    HistoryManagerAbstract.prototype.removeFirstState = function () {
        this.statesStack.shift();
    };
    HistoryManagerAbstract.prototype.statesBackward = function () {
        if (this.statesStack.length) {
            this.applyHistoryState(this.statesStack[this.safeStatesCursor(this.statesCursor - 1)]);
        }
    };
    HistoryManagerAbstract.prototype.statesForward = function () {
        if (this.statesStack.length) {
            this.applyHistoryState(this.statesStack[this.safeStatesCursor(this.statesCursor + 1)]);
        }
    };
    HistoryManagerAbstract.prototype.historyManagerHandleKeyboardEvents = function (e) {
        var code = e.which || e.keyCode;
        if (code === __WEBPACK_IMPORTED_MODULE_0__Keys__["a" /* Keys */].Z && e.ctrlKey) {
            this.statesBackward();
        }
        if (code === __WEBPACK_IMPORTED_MODULE_0__Keys__["a" /* Keys */].Y && e.ctrlKey) {
            this.statesForward();
        }
    };
    HistoryManagerAbstract.prototype.pushHistoryState = function (state) {
        if (state === void 0) { state = null; }
        this.statesStack = this.statesStack.slice(0, this.statesCursor + 1);
        if (this.statesStack.length === this.historySize) {
            this.removeFirstState();
        }
        this.statesStack.push(state || this.getCurrentState());
        this.statesCursor = this.statesStack.length - 1;
    };
    HistoryManagerAbstract.prototype.pushHistoryStateIfChanged = function () {
        if (this.getCurrentStateHash() !== this.lastHistoryStateHash) {
            this.lastHistoryStateHash = this.getCurrentStateHash();
            this.pushHistoryState(this.getCurrentState());
        }
    };
    HistoryManagerAbstract.prototype.historyReset = function () {
        this.statesCursor = 0;
        this.statesStack = [];
        this.lastHistoryStateHash = null;
    };
    return HistoryManagerAbstract;
}());
/* harmony default export */ __webpack_exports__["a"] = (HistoryManagerAbstract);


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Keys; });
/**
 * Keyboard key codes
 * @type {{CTRL: number; Y: number; Z: number}}
 */
var Keys = {
    CTRL: 17,
    Y: 89,
    Z: 90
};


/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,